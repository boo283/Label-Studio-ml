import os
import time
from minio import Minio
from minio.error import S3Error

# C·∫•u h√¨nh MinIO client
def get_minio_client():
    minio_endpoint = os.environ.get('MINIO_ENDPOINT', 'localhost:9000')
    minio_access_key = os.environ.get('MINIO_ROOT_USER')
    minio_secret_key = os.environ.get('MINIO_ROOT_PASSWORD')
    secure = os.environ.get('MINIO_SECURE', 'false').lower() == 'true'

    print(f"‚úÖ K·∫øt n·ªëi ƒë·∫øn MinIO t·∫°i {minio_endpoint}")
    print(f"‚úÖ MINIO_ROOT_USER={minio_access_key}")

    client = Minio(
        minio_endpoint,
        access_key=minio_access_key,
        secret_key=minio_secret_key,
        secure=secure
    )
    return client

def ensure_bucket_exists(client, bucket_name):
    try:
        if not client.bucket_exists(bucket_name):
            print(f"T·∫°o bucket {bucket_name}...")
            client.make_bucket(bucket_name)
            # Thi·∫øt l·∫≠p policy cho bucket ƒë·ªÉ cho ph√©p t·∫£i xu·ªëng
            policy = {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {"AWS": "*"},
                        "Action": ["s3:GetObject"],
                        "Resource": [f"arn:aws:s3:::{bucket_name}/*"]
                    }
                ]
            }
            # Chuy·ªÉn ƒë·ªïi policy th√†nh JSON string
            client.set_bucket_policy(bucket_name, str(policy))
            print(f"‚úÖ ƒê√£ t·∫°o bucket {bucket_name} v√† thi·∫øt l·∫≠p quy·ªÅn download")
        else:
            print(f"‚úÖ Bucket {bucket_name} ƒë√£ t·ªìn t·∫°i")
    except S3Error as e:
        print(f"‚ùå L·ªói khi t·∫°o bucket: {e}")

def upload_files_to_minio(client, local_folder, bucket_name):
    # Ki·ªÉm tra th∆∞ m·ª•c local c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(local_folder):
        print(f"‚ùå Th∆∞ m·ª•c {local_folder} kh√¥ng t·ªìn t·∫°i")
        return

    # In s·ªë l∆∞·ª£ng file trong th∆∞ m·ª•c
    total_files = sum(len(files) for _, _, files in os.walk(local_folder))
    print(f"üìÇ T·ªïng s·ªë file trong th∆∞ m·ª•c {local_folder}: {total_files}")
    # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
    for root, _, files in os.walk(local_folder):
        for file in files:
            local_file_path = os.path.join(root, file)

            # T√≠nh to√°n object name (ƒë∆∞·ªùng d·∫´n trong bucket)
            # N·∫øu mu·ªën gi·ªØ c·∫•u tr√∫c th∆∞ m·ª•c, s·ª≠ d·ª•ng ƒëo·∫°n code n√†y:
            # rel_path = os.path.relpath(local_file_path, local_folder)
            # object_name = rel_path.replace("\\", "/")

            # N·∫øu ch·ªâ mu·ªën l∆∞u t√™n file (kh√¥ng gi·ªØ c·∫•u tr√∫c th∆∞ m·ª•c):
            object_name = os.path.basename(local_file_path)

            try:
                # Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i trong bucket ch∆∞a
                try:
                    client.stat_object(bucket_name, object_name)
                    print(f"‚è≠Ô∏è File ƒë√£ t·ªìn t·∫°i trong bucket: {object_name}")
                except S3Error:
                    # File ch∆∞a t·ªìn t·∫°i, upload l√™n
                    print(f"üì§ Uploading: {object_name}")
                    client.fput_object(
                        bucket_name,
                        object_name,
                        local_file_path,
                        # T·ª± ƒë·ªông x√°c ƒë·ªãnh content-type d·ª±a tr√™n ph·∫ßn m·ªü r·ªông c·ªßa file
                        content_type='application/octet-stream'
                    )
                    print(f"‚úÖ ƒê√£ upload: {object_name}")

            except S3Error as e:
                print(f"‚ùå L·ªói khi upload {object_name}: {e}")

def main():
    bucket_name = "uavpov1"
    local_folder = "/init-images"

    # ƒê·ª£i MinIO s·∫µn s√†ng
    retry_count = 0
    max_retries = 30
    retry_interval = 5  # seconds

    print("ƒê·ª£i MinIO s·∫µn s√†ng...")

    while retry_count < max_retries:
        try:
            client = get_minio_client()
            # Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch list buckets
            client.list_buckets()
            print("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn MinIO")
            break
        except Exception as e:
            print(f"...MinIO ch∆∞a s·∫µn s√†ng, ƒë·ª£i th√™m... ({e})")
            retry_count += 1
            time.sleep(retry_interval)

    if retry_count >= max_retries:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MinIO sau nhi·ªÅu l·∫ßn th·ª≠")
        return

    # ƒê·∫£m b·∫£o bucket t·ªìn t·∫°i
    ensure_bucket_exists(client, bucket_name)

    # Upload t·∫•t c·∫£ file t·ª´ th∆∞ m·ª•c local
    upload_files_to_minio(client, local_folder, bucket_name)

    print(f"‚úÖ ƒê√£ ho√†n th√†nh vi·ªác import ·∫£nh t·ª´ {local_folder} v√†o bucket {bucket_name}")

if __name__ == "__main__":
    main()